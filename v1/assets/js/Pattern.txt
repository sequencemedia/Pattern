Instantiating a Model

Instantiating a Model:

	var model = new Pattern.Model();

Instantiating a Model with default attribute values:

	var model = new Pattern.Model({ id: 1 });

Instantiating a Model with default attributes values and attribute validators:

	var model = new Pattern.Model({ id: 1 }, { id: function (value) { return value > 1; } });

Default attributes are not validated when the model is instantiated. Pattern assumes that the default attribute values are valid.

Note that the second argument is dependent on the first. To instantiate a Model without default attribute values but with attribute validators:

	var model = new Pattern.Model({ }, { id: function (value) { return value > 1; } });

Instantiating a ModelList

Instantiating a ModelList:

	var modelList = new Pattern.ModelList();

Instantiating a ModelList with Models having default attribute values:

	var modelList = new Pattern.ModelList([{ id: 1 }, { id: 2 }]);

Instantiating a ModelList with Models having default attribute values and validators:

	var modelList = new Pattern.ModelList([{ id: 1 }, { id: 2 }], { id: function (value) { return value > 1; } });

Note that, as with instantiating a Model, the second argument is dependent on the first. To instantiate a ModelList having Models without default attribute values but with attribute validators:

	var modelList = new Pattern.ModelList([{ }, { }], { id: function (value) { return value > 1; } });

Instantiating a View

Instantiating a View:

	var view = new Pattern.View();

Instantiating a View bound to a Model:

	var view = new Pattern.View(model);

Instantiating a View bound to a Model with the View subscribing to changes in attribute values of the Model:

	var view = new Pattern.View(model, { model: { id: function (event) { return true; } } });

Instantiating a ViewList

Instantiating a ViewList:

	var viewList = new Pattern.ViewList();

Instantiating a ViewList bound to a ModelList:

	var viewList = new Pattern.ViewList(modelList);

Instantiating a ViewList bound to a ModelList with its Views subscribing to changes in attribute values of the Models and the ViewList subscribing to changes in the ModelList:

	var viewList = new Pattern.ViewList(modelList, {
			model: { id: function (event) { } },
			modelList: { add: function (event) { }, remove: function (event) { } } });

Instantiating a Controller

Instantiating a Controller:

	var controller = new Pattern.Controller();

Instantiating a Controller bound to a ViewList:

	var controller = new Pattern.Controller(viewList);

Instantiating a Controller bound to a ViewList subscribing to events raised by the Views and subscribing to changes in the ViewList:

	var controller = new Pattern.Controller(viewList, {
			view: { id: function (event) { } },
			viewList: { add: function (event) { }, remove: function (event) { } } });

Note that events must be raised by the View to the Controller. For example:

Note, also, that a Controller can subscribe to events raised by another Controller, but that will be discussed elsewhere.

Inheriting from a Model

Inheriting from a Model constructor:

	var Child = Pattern.Model.descendant();

Inheriting again:

	var GrandChild = Child.descendant();

Inheriting from a Model instance:

	var model = new Pattern.Model();
	var Child = model.descendant();

Iheriting again:

	var child = new Child();
	var GrandChild = child.descendant();

Inheriting from a Model constructor with default attribute values:

	var Child = Pattern.Model.descendant({ id: 1 });

All instances of the Child constructor will inherit the default attribute values.

Inheriting from a Model constructor with default attribute values and attribute validators:

	var Child = Pattern.Model.descendant({ id: 1 }, { id: function (value) { return value > 1; } });

All instances of the Child constructor will inherit the attribute validators.

Iheriting again mixes-in the default attribute values and attribute validators of the parent with the child:

	var GrandChild = Child.descendant({ grandChild: 1 }, { grandChild: function (value) { return value > this.get("grandChild"); } });

All instances of the GrandChild constructor inherit the mixed-in default attribute values and attribute validators.

Inheriting from a Model instance inherits in the current attributes and validators of the instance.

	var child = new Child();
	child.set("child", 1);
	var GrandChild = child.descendant({ grandChild: 1 }, { grandChild: function (value) { return value > this.get("grandChild"); } });

Inheriting from an instance is more volatile than inheriting from a constructor because the attributes of an instance can change.

	var grandChild = new GrandChild();

The instance "grandChild" inherits all of the current attributes of "child".

Changing an attribute value of the "child" instance and creating another instance of "GrandChild" inherits the change made to "child".

	var model = new Pattern.Model();

	var Child = Pattern.View.descendant(model);
	var GrandChild = Child.descendant();
	var GreatGrandChild = GrandChild.descendant();

	var child = new Child();
	var grandChild = new GrandChild();
	var greatGrandChild = new GreatGrandChild();

	var model = new Pattern.Model();

	var Child = (new Pattern.View).descendant(model);
	Child.prototype.child = { };
	var GrandChild = (new Child).descendant();
	GrandChild.prototype.grandChild = { };
	var GreatGrandChild = (new GrandChild).descendant();
	GreatGrandChild.prototype.grandChild = { };

	var child = new Child();
	var grandChild = new GrandChild();
	var greatGrandChild = new GreatGrandChild();

	var Child = (new Pattern.View).descendant(model);
	var GrandChild = (new Child).descendant();
	var GreatGrandChild = (new GrandChild).descendant();

Inheriting from a ModelList

Inheriting from a ModelList constructor:

var Child = Pattern.ModelList.descendant();

Inheriting again:

var GrandChild = Child.descendant();

Inheriting from a ModelList instance:

var modelList = new Pattern.ModelList();
var Child = modelList.descendant();

Inheriting again:

var child = new Child();
var GrandChild = child.descendant();


See inheriting from a Model constructor and inheriting from a Model instance.

Inheriting from a ModelList constructor or an instance instantiates Models from the mixed-in list of default attribute values of the parent and the child.

Similarly, with attribute validators.

var Child = Pattern.ModelList.descendant([{ id: 1 }, { id: 2 }], { id: function (v) { console.log(v); return true; } });
var GrandChild = Child.descendant([{ id: 3, grandChild: false }, { id: 4, grandChild: false }], { grandChild: function (v) { console.log(v); return true; } });
var GreatGrandChild = GrandChild.descendant([{ id: 5, greatGrandChild: false }, { id: 6, greatGrandChild: false }], { greatGrandChild: function (v) { console.log(v); return true; } });


Inheriting from a View

See inheriting from a Model constructor and inheriting from a Model instance.

Inheriting from a ViewList

See inheriting from a Model constructor and inheriting from a Model instance.

Inheriting from a Controller.

See inheriting from a Model constructor and inheriting from a Model instance.

<!--
Note that events must be raised by the View to the Controller. For example:

	var viewList = new Pattern.ViewList(modelList, {
			model: { id: function (event) { this.raise("id", { was: event }); } },
			modelList: { add: function (event) { }, remove: function (event) { } } });

Pattern subscribes to changes in the "id" attribute value of the Model. When the method is called, it will be in the context of the View bound to it.

	var controller = new Pattern.Controller(viewList, {
			view: { id: function (event) { } },
			viewList: { add: function (event) { }, remove: function (event) { } } });

Note, also, that a Controller can subscribe to events raised by another Controller, but that will be discussed elsewhere.

Events will be described in more detail elsewhere.
-->